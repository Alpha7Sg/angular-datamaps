"use strict";angular.module("datamaps",[]),angular.module("datamaps").directive("datamap",["$compile",function(a){return{restrict:"EA",scope:{map:"=",plugins:"=?",zoomable:"@?",onClick:"&?"},link:function(b,c,d){function e(){return{element:c[0].children[0],scope:"usa",height:b.height,width:b.width,fills:{defaultFill:"#b9b9b9"},data:{},done:function(a){function c(){a.svg.selectAll("g").attr("transform","translate("+d3.event.translate+")scale("+d3.event.scale+")")}angular.isDefined(d.onClick)&&a.svg.selectAll(".datamaps-subunit").on("click",function(a){b.onClick()(a)}),angular.isDefined(d.zoomable)&&a.svg.call(d3.behavior.zoom().on("zoom",c))}}}b.api={refresh:function(a){b.api.updateWithOptions(a)},updateWithOptions:function(a){b.api.clearElement(),b.width=(a.options||{}).width||null,b.height=(a.options||{}).height||(b.width?.5*b.width:null),b.legendHeight=(a.options||{}).legendHeight||50,b.mapOptions=e(a.options),b.mapOptions=angular.extend(b.mapOptions,a),b.datamap=new Datamap(b.mapOptions),b.api.updatePlugins(b.datamap),b.api.refreshOptions(a.options),b.api.updateWithData(a.data)},updatePlugins:function(a){b.plugins&&angular.forEach(b.plugins,function(b,c){a.addPlugin(c,b),a[c]()})},refreshOptions:function(a){a&&(a.labels&&b.datamap.labels({labelColor:a.labelColor?a.labelColor:"#333333",fontSize:a.labelSize?a.labelSize:12}),a.legend&&b.datamap.legend())},updateWithData:function(a){b.datamap.updateChoropleth(a),b.api.updatePlugins(b.datamap)},clearElement:function(){b.datamap=null,c.empty();var d=a('<div style="position: relative; display: block; padding-bottom: {{ legendHeight }}px;"></div>')(b);c.append(d)}},b.$watch("map",function(a,c){angular.isUndefined(a)||angular.equals({},a)||(!b.datamap||angular.equals(c.data,a.data)?b.api.refresh(a):b.api.updateWithData(a.data))},!0)}}}]);